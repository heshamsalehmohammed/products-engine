

<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/88/three.min.js"></script>
<script id="vertexShader" type="x-shader/x-vertex">
    void main() {
        gl_Position = vec4( position, 1.0 );
    }
</script>
<script id="fragmentShader" type="x-shader/x-fragment">
  uniform vec2 u_resolution;
  uniform vec4 u_mouse;
  uniform float u_time;
  uniform sampler2D u_noise;
  uniform sampler2D u_buffer;
  uniform bool u_renderpass;
  uniform int u_frame;
  
  #define PI 3.141592653589793
  #define TAU 6.283185307179586
  
  const int octaves = 6;

  vec2 hash2(vec2 p)
  {
    vec2 o = texture2D( u_noise, (p+0.5)/256.0, -100.0 ).xy;
    return o;
  }
  
  float sinnoise(vec3 loc){
    float s = (sin(u_time) * .5 + .5);
    float c = (sin(u_time * 2.5) * .5 + .5);
    
    vec3 p = loc;
    
    float _c = cos(float(p.x * .1));
    float _s = sin(float(p.x) * .1);
    mat2 mat = mat2(_c, -_s, _s, _c);
    
    for (int i=0; i<octaves; i++){
      p += cos( p.yxz * 3. + vec3(0., u_time * 5., 10.6)) * (.1 + s * .2);
      p += sin( p.yxz + vec3(cos(u_time * .5), .1, 0.)) * (.5 - c * .1) ;
      p *= 1. + s * .1;
      
      p.xy *= mat;
    }

    // return dot(p, p);
    return length(sin(p * .5) * 2.);
  }
  
  vec3 hsb2rgb( in vec3 c ){
    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),
                             6.0)-3.0)-1.0,
                     0.0,
                     1.0 );
    rgb = rgb*rgb*(3.0-2.0*rgb);
    return c.z * mix( vec3(1.0), rgb, c.y);
  }
  
  vec3 domain(vec2 z){
    return vec3(hsb2rgb(vec3(atan(z.y,z.x)/TAU,1.,1.)));
  }
  vec3 colour(vec2 z) {
      return domain(z);
  }

  void main() {
    vec2 uv = (gl_FragCoord.xy - 0.5 * u_resolution.xy) / min(u_resolution.y, u_resolution.x);
    vec2 sample = gl_FragCoord.xy / u_resolution.xy;
    
    vec4 fragcolour = vec4(sinnoise(vec3(uv.xy, 1.) * 10.) * .2);
    // vec3 fragcolour = colour(uv);
    
    if(u_renderpass == true) {
      vec2 mouse = u_mouse.xy - uv;

      float shade = 1.;

      if(u_frame < 5) {
        shade = smoothstep(.1, .55, length(mouse * (1. + fragcolour.x * 2.)));
        // fragcolour = length(uv)
      } else {
        shade = smoothstep(.1, .55, length(mouse * (1. + fragcolour.x * 2.)));
      }
      fragcolour = vec4(clamp(shade*1.5, 0., 1.));
      gl_FragColor = fragcolour;
    } else {
      fragcolour *= 1. - texture2D(u_buffer, sample);
      fragcolour = 1. - fragcolour;
      gl_FragColor = 1. - fragcolour * fragcolour;
      // gl_FragColor = vec4(smoothstep(.3, .6,gl_FragColor));
    }

  }
</script>


<div id="container" touch-action="none"></div>

<script>
  /*
Most of the stuff in here is just bootstrapping. Essentially it's just
setting ThreeJS up so that it renders a flat surface upon which to draw 
the shader. The only thing to see here really is the uniforms sent to 
the shader. Apart from that all of the magic happens in the HTML view
under the fragment shader.
*/

let container;
let camera, scene, renderer;
let uniforms;

let divisor = 1 / 8;
let textureFraction = 1 / 1;

let w = 2048;
let h = 1024;

let newmouse = {
  x: 0,
  y: 0
};

let loader=new THREE.TextureLoader();
let texture, rtTexture, rtTexture2;
loader.setCrossOrigin("anonymous");
loader.load(
  'https://s3-us-west-2.amazonaws.com/s.cdpn.io/982762/noise.png',
  function do_something_with_texture(tex) {
    texture = tex;
    texture.wrapS = THREE.RepeatWrapping;
    texture.wrapT = THREE.RepeatWrapping;
    texture.minFilter = THREE.LinearFilter;
    init();
    animate();
  }
);

function init() {
  container = document.getElementById( 'container' );

  camera = new THREE.Camera();
  camera.position.z = 1;

  scene = new THREE.Scene();

  var geometry = new THREE.PlaneBufferGeometry( 2, 2 );
  
  rtTexture = new THREE.WebGLRenderTarget(window.innerWidth * textureFraction, window.innerHeight * textureFraction);
  rtTexture2 = new THREE.WebGLRenderTarget(window.innerWidth * textureFraction, window.innerHeight * textureFraction);

  uniforms = {
    u_time: { type: "f", value: 1.0 },
    u_resolution: { type: "v2", value: new THREE.Vector2() },
    u_noise: { type: "t", value: texture },
    u_buffer: { type: "t", value: rtTexture.texture },
    u_mouse: { type: "v3", value: new THREE.Vector3() },
    u_frame: { type: "i", value: -1. },
    u_renderpass: { type: 'b', value: false }
  };

  var material = new THREE.ShaderMaterial( {
    uniforms: uniforms,
    vertexShader: document.getElementById( 'vertexShader' ).textContent,
    fragmentShader: document.getElementById( 'fragmentShader' ).textContent
  } );
  material.extensions.derivatives = true;

  var mesh = new THREE.Mesh( geometry, material );
  scene.add( mesh );

  renderer = new THREE.WebGLRenderer();
  renderer.setPixelRatio( window.devicePixelRatio );

  container.appendChild( renderer.domElement );

  onWindowResize();
  window.addEventListener( 'resize', onWindowResize, false );
  

  document.addEventListener('pointermove', (e)=> {
    let ratio = window.innerHeight / window.innerWidth;
    if(window.innerHeight > window.innerWidth) {
      newmouse.x = (e.pageX - window.innerWidth / 2) / window.innerWidth;
      newmouse.y = (e.pageY - window.innerHeight / 2) / window.innerHeight * -1 * ratio;
    } else {
      newmouse.x = (e.pageX - window.innerWidth / 2) / window.innerWidth / ratio;
      newmouse.y = (e.pageY - window.innerHeight / 2) / window.innerHeight * -1;
    }
    
    e.preventDefault();
  });
    document.addEventListener('pointerdown', (e)=> {
      if(e.button === 0) {
        uniforms.u_mouse.value.z = 1;
      } else if (e.button === 2) {
        uniforms.u_mouse.value.w = 1;
      }
      e.preventDefault();
    });
    document.addEventListener('pointerup', (e)=> {
      if(e.button === 0) {
        uniforms.u_mouse.value.z = 0;
      } else if (e.button === 2) {
        uniforms.u_mouse.value.w = 0;
      }
      e.preventDefault();
    });
}

function onWindowResize( event ) {
  w = 2048;
  h = 1024;
  w = window.innerWidth;
  h = window.innerHeight;
  
  renderer.setSize( w, h );
  uniforms.u_resolution.value.x = renderer.domElement.width;
  uniforms.u_resolution.value.y = renderer.domElement.height;
  
  uniforms.u_frame.value = 0;
  
  rtTexture = new THREE.WebGLRenderTarget(w * textureFraction, h * textureFraction);
  rtTexture2 = new THREE.WebGLRenderTarget(w * textureFraction, h * textureFraction);
}

function animate(delta) {
  requestAnimationFrame( animate );
  render(delta);
}



let capturing = false;


let capturer = new CCapture( { 
  verbose: true, 
  framerate: 60,
  // motionBlurFrames: 4,
  quality: 90,
  format: 'webm',
  workersPath: 'js/'
 } );


isCapturing = function(val) {
  if(val === false && window.capturing === true) {
    capturer.stop();
    capturer.save();
  } else if(val === true && window.capturing === false) {
    capturer.start();
  }
  capturing = val;
}
toggleCapture = function() {
  isCapturing(!capturing);
}

window.addEventListener('keyup', function(e) { if(e.keyCode == 68) toggleCapture(); });

let then = 0;
function renderTexture(delta) {
  // let ov = uniforms.u_buff.value;
  
  let odims = uniforms.u_resolution.value.clone();
  uniforms.u_resolution.value.x = w * textureFraction;
  uniforms.u_resolution.value.y = h * textureFraction;

  uniforms.u_buffer.value = rtTexture2.texture;
  
  uniforms.u_renderpass.value = true;
  
//   rtTexture = rtTexture2;
//   rtTexture2 = buffer;
  
  window.rtTexture = rtTexture;
  renderer.setRenderTarget(rtTexture);
  renderer.render( scene, camera, rtTexture, true );
  
  let buffer = rtTexture
  rtTexture = rtTexture2;
  rtTexture2 = buffer;

  // uniforms.u_buff.value = ov;

  uniforms.u_buffer.value = rtTexture.texture;
  uniforms.u_resolution.value = odims;
  uniforms.u_renderpass.value = false;
}
function render(delta) {
  uniforms.u_frame.value++;
  
  uniforms.u_mouse.value.x += ( newmouse.x - uniforms.u_mouse.value.x ) * divisor;
  uniforms.u_mouse.value.y += ( newmouse.y - uniforms.u_mouse.value.y ) * divisor;
  
  uniforms.u_time.value = delta * 0.0005;
  renderer.render( scene, camera );
  renderTexture();
  
  if(capturing) {
    capturer.capture( renderer.domElement );
  }
}
</script>